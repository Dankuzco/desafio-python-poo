import time
from datetime import datetime
from abc import ABC, abstractclassmethod, abstractmethod, abstractproperty

class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []
    
    def registrar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

class Conta:
    def __init__(self, numero, cliente):
        self._saldo = 0
        self._numero = numero
        self.agencia = "0001"
        self.cliente = cliente
        self.historico = Historico()

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia
    
    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico
    
    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("Saldo insuficiente para saque!!!")

        elif valor > 0:
            self._saldo -= valor
            print("Saque realizado com sucesso")
            return True
        
        else:
            print("!!!! OPERAÇÃO FALHOU !!!!")
            return False
        
    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print ("Depósito realizado!!!")
            return True
        else:
            print("!!!!Valor inválido!!!!")
            return False

class ContaCorrente(Conta):
    def __init__(self, numero, cliente, limite=500, limite_saque=3):
        super().__init__(numero, cliente)
        self.limite = limite
        self.limite_saque = limite_saque

    @property
    def cliente(self):
        return self._cliente
    
    @cliente.setter
    def cliente(self, novo_cliente):
        self._cliente = novo_cliente   

    @Conta.agencia.setter
    def agencia(self, valor):
        self._agencia = valor

    @property
    def historico(self):
        return self._historico
    
    @historico.setter
    def historico(self, value):
        self._historico = value

    @Conta.numero.setter
    def numero(self, valor):
        self._numero = valor

    def sacar(self, valor):
        numero_saques = len([transacao for transacao in self.historico.transacoes if transacao["tipo"] == Saque.__name__])
        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saque

        if excedeu_limite:
            print("Saldo insuficiente para saque!!!")

        elif excedeu_saques:
            print("Limite de saques excedido!!!")

        elif valor > self.saldo:
            print("Saldo insuficiente para saque!!!")

        else:
            self._saldo -= valor
            print("Saque realizado com sucesso")
            return True

        return False

class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "Valor": transacao.valor,
                "Data": datetime.now().strftime("%d-%m-%Y %H:%M:%S"),
            }
        )

class Transacao(ABC): 
    @property  
    def valor (self):
        pass

    def registrar(self, conta):
        pass

class Saque(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor (self):
        return self._valor
    
    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)
        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

class Deposito(Transacao):
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor (self):
        return self._valor
    
    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)
        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)

def menu():
    menu = """  
        BEM VINDO AO NOSSO BANCO
    [u] Criar cliente
    [nc] Nova Conta
    [d] Depositar
    [s] Sacar
    [e] Extrato
    [q] Sair
    => """
    return (input(menu))

def filtrar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def recuperar_conta_cliente(cliente):
    if not cliente.contas:
        print("Cliente não possui conta")
        return None
    
    return cliente.contas[0]

def depositar(clientes):
    cpf = input("Insira seu CPF: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("Cliente não encontrado")
        return
    
    valor = float(input("Informe o valor para depósito: "))
    transacao = Deposito(valor)
    
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    transacao.registrar(conta)

def sacar(clientes):
    cpf = input("Insira seu CPF: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("Cliente não encontrado")
        return
    
    valor = float(input("Insira o valor para saque: "))
    transacao = Saque(valor)
    
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    transacao.registrar(conta)

def exibir_extrato(clientes):
    cpf = input("Insira seu CPF: ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("Cliente não encontrado")
        return
    
    conta = recuperar_conta_cliente(cliente)
    if not conta:
        return
    
    print("########################## EXTRATO ##########################")
    transacoes = conta.historico.transacoes

    if not transacoes:
        print("Não foram feitas movimentações")
    else:
        for transacao in transacoes:
            print(f"{transacao['tipo']}: R$ {transacao['Valor']:.2f}")
    print(f"Saldo: R$ {conta.saldo:.2f}")

def criar_cliente(clientes):
    cpf = input("Informe o CPF (somente números): ")
    cliente = filtrar_cliente(cpf, clientes)

    if cliente:
        print("Cliente já existente com este CPF")
        return
    
    nome = input("Digite seu nome: ")
    data_nascimento = input("Informe a sua data de nascimento (dd-mm-aaaa): ")
    endereco = input("Informe seu endereço (cidade - estado): ")

    cliente = PessoaFisica(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)
    clientes.append(cliente)
    print("Cliente criado com sucesso")

def criar_conta(numero_conta, clientes, contas):
    cpf = input("Informe seu CPF (somente números): ")
    cliente = filtrar_cliente(cpf, clientes)

    if not cliente:
        print("Cliente não cadastrado")
        return
    
    conta = ContaCorrente(numero=numero_conta, cliente=cliente) 
    contas.append(conta)
    cliente.adicionar_conta(conta)  

    print("Conta criada com sucesso")

def main():
    contas = []
    clientes = []
    
    while True:
        opcao = menu()

        if opcao == "u":
            criar_cliente(clientes)
        
        elif opcao == "nc":
            numero_conta = len(contas) + 1
            criar_conta(numero_conta, clientes, contas)

        elif opcao == "d":
            depositar(clientes)
            
        elif opcao == "s":
            sacar(clientes)
       
        elif opcao == "e":
            exibir_extrato(clientes)

        elif opcao == "q":
            print("Obrigado por utilizar nosso Sistema, até logo :)")
            time.sleep(1)
            break

        else:
            print("Operação inválida")

if __name__ == "__main__":
    main()
